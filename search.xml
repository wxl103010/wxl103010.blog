<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客添加音乐页面</title>
      <link href="/bo-ke-tian-jia-yin-le-ye-mian.html"/>
      <url>/bo-ke-tian-jia-yin-le-ye-mian.html</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这次是添加单独的界面了，与之前的不一样，之前的界面是已经做好的，而现在所需要的页面就得根据自己的情况来创作了。我会把我制作的顺序及相关说明列出来，以供参考。</p><h2 id="添加音乐界面"><a href="#添加音乐界面" class="headerlink" title="添加音乐界面"></a>添加音乐界面</h2><p><strong>1、首先是添加菜单，将音乐添加到菜单中。</strong></p><p>在博客配置文件_config.yml中添加以下信息。</p><pre><code>  音乐:    url: /musics    icon: fas fa-music</code></pre><p>注意：如果写好后报站，将每一行前面空的部分删除，用空格填充。</p><p><strong>2、生成音乐对应的界面文件</strong></p><p>在博客文件下使用命令行，键入命令<code>hexo new page 文件名称</code>。</p><p>在/source/文件名称/中找到刚刚创建的文件index.md，然后打开补命令处，如下例。</p><pre><code>---title: musicsdate: 2019-12-21 13:40:29type: "musics"layout: "musics"---</code></pre><p>注：第四项，值可以是false，这样的话，整个页面都需要重新编号，如果是写的musics，则页面上部是博客内容，下面可以自定义。</p><p>这个名字其实与第三步中的页面名称一样就行，没必要非得写成这样。</p><p><strong>3、创建音乐界面内容文件</strong></p><p>在/themes/matery/layout/中创建页面music.ejs，然后添加如下信息。</p><pre><code>&lt;%- partial('_partial/bg-cover') %&gt;&lt;main class="content"&gt;&lt;/main&gt;</code></pre><p>好了，现在在上面代码中间空的位置添加信息就可以生成显示到页面中了。</p><p><strong>4、添加音乐</strong></p><p>添加音乐的话就需要使用<iframe>标签了，一个简单的办法就是，先在网易云音乐中找到音乐，然后选择“生成外链播放器”，然后把代码复制过来就行了，例如下面的这首《不见长安》。</p><pre><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=101109&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</code></pre><p>标签里有很多属性，具体的话看下面的介绍。</p><p>这个里面的地址，其中的 id 后面是网易云音乐歌曲 id ，可以从网易音乐的分享链接中找到。</p><p>歌单的话，也是一样的操作，具体标签里的属性稍有差别，id仍是可进行查找替换。</p><h2 id="iframe标签属性"><a href="#iframe标签属性" class="headerlink" title="iframe标签属性"></a>iframe标签属性</h2><ul><li>title : 音乐标题</li><li>author : 歌手名</li><li>url: 音乐文件路径</li><li>picture_url: 可选，音乐图片路径</li><li>narrow: 可选，狭窄的样式</li><li>autoplay: 可选，自动播放，不支持移动浏览器</li><li>width:xxx : 可选，前缀 width:，播放器的宽度 (默认: 100%)</li><li>lrc:xxx : 可选，前缀 lrc:，LRC 文件路径</li><li>frameborder: 是否显示边框，1（yes）、0（no）</li><li>height: 框架的高度</li><li>width: 框架的宽度</li><li>name: 框架的名称</li><li>scrolling: 框架是否滚动，yes、no、auto</li><li>src: 内框架的地址。可以使用页面地址，也可以是图片的地址。</li><li>srcdoc: 用来替代原来HTML body里面的内容。但是IE不支持，不过也没什么孵用。</li><li></li></ul></iframe></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客添加音乐页面 </tag>
            
            <tag> wxl103010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客添加文章及Markdown</title>
      <link href="/bo-ke-tian-jia-wen-zhang-ji-markdown.html"/>
      <url>/bo-ke-tian-jia-wen-zhang-ji-markdown.html</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>博客建好后，接下来便是要写两篇内容了，下面是我写的步骤，加粗行为大步骤，剩下的内容是详细说明，嫌麻烦想简单的话，直接看步骤就OK。</p><h2 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h2><p><strong>1、打开命令行，所在路径移动到博客文件夹，键入命令<code>hexo new 文章名称</code>，这时便会在/source/_posts中创建一个md格式的文件。</strong></p><p>1）命令的格式：hexo new [layout] &lt;title&gt;</p><p>2）layout是指文章的布局，默认为post，可以修改_config.yml中的default_layout来指定默认布局。</p><p>3）默认有三种布局：post、page 和 draft。创建文件后，会保存到不同的路径，自定义的布局和post相同。</p><table><thead><tr><th>布局</th><th align="left">路径</th></tr></thead><tbody><tr><td>post</td><td align="left">source/_posts</td></tr><tr><td>page</td><td align="left">source</td></tr><tr><td>draft</td><td align="left">soucre/_drafts</td></tr></tbody></table><p><strong>2、添加文章默认信息，如下例为本文的信息</strong></p><pre><code>---title: 博客添加文章及Markdowndate: 2019-12-20 19:01:13author: wxl103010categories: 博客搭建tags: [hexo,matery,博客搭建]top: falsekeywords: 博客添加文章及Markdownsummary: 博客基础已经做好了，应该写内容了。---</code></pre><p>1）以上内容中的具体意义，详见之前的文章《为博客更换主题》，里面的“Front-matter 选项详解”就是这些信息。</p><p>2）除了以上信息外，如果这篇文章不想被处理，那么可以单独添加一个layout，设为false。</p><p>3）默认情况下，添加的文章名称就是文件的名称，如果不想这样，而是按时间或别的为文件名称，可以修改_config.myl中的new_post_name的值。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>:title</td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td>:year</td><td>建立的年份，比如，2020</td></tr><tr><td>:month</td><td>建立的月份（有前导零），比如04</td></tr><tr><td>:i_month</td><td>建立的月份（无前导零），比如4</td></tr><tr><td>:day</td><td>建立的日期（有前导零），比如07</td></tr><tr><td>:i_day</td><td>建立的日期（无前导零），比如7</td></tr></tbody></table><p> 4）新建的文件中，文章信息默认只有三个，这时可以修改博客文件夹中scaffolds文件夹下的信息，便可以自定义修改模板。</p><p><strong>草稿（特殊）</strong></p><p>新建时使用draft布局，可建立草稿文章，例如：hexo new draft 草稿</p><p>草稿文章会在source/_drafts目录下生成文件，该文章是不会被显示在页面中，链接也访问不到。如果需要显示出来，则使用命令<code>hexo publis 文章名</code>。</p><p>个人感觉用处不大，因为文章的格式是md，而现在很多md编辑器就自带预览功能，随便找个地方建好后，然后放到/source/_posts/中便可以了。</p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。我现在也是在初使用中。下面是我摘自网上的信息，没有一个一个验证过，不过想来都是基础信息，差不了多少，以后会逐个去试，如有问题也会不断进行修改。</p><p>本人使用的编辑器是Typora，官网：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p><p>原文章地址：<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">https://www.appinn.com/markdown/</a></p><h1 id="Markdown-语法说明-简体中文版-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) / (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) / (<a href="http://wow.kuapp.com/markdown/basic.html" target="_blank" rel="noopener">点击查看快速入门</a>)</h1><ul><li>概述<ul><li><a href="http://wow.kuapp.com/markdown/#philosophy" target="_blank" rel="noopener">宗旨</a></li><li><a href="http://wow.kuapp.com/markdown/#html" target="_blank" rel="noopener">兼容 HTML</a></li><li><a href="http://wow.kuapp.com/markdown/#autoescape" target="_blank" rel="noopener">特殊字符自动转换</a></li></ul></li><li>区块元素<ul><li><a href="http://wow.kuapp.com/markdown/#p" target="_blank" rel="noopener">段落和换行</a></li><li><a href="http://wow.kuapp.com/markdown/#header" target="_blank" rel="noopener">标题</a></li><li><a href="http://wow.kuapp.com/markdown/#blockquote" target="_blank" rel="noopener">区块引用</a></li><li><a href="http://wow.kuapp.com/markdown/#list" target="_blank" rel="noopener">列表</a></li><li><a href="http://wow.kuapp.com/markdown/#precode" target="_blank" rel="noopener">代码区块</a></li><li><a href="http://wow.kuapp.com/markdown/#hr" target="_blank" rel="noopener">分隔线</a></li></ul></li><li>区段元素<ul><li><a href="http://wow.kuapp.com/markdown/#link" target="_blank" rel="noopener">链接</a></li><li><a href="http://wow.kuapp.com/markdown/#em" target="_blank" rel="noopener">强调</a></li><li><a href="http://wow.kuapp.com/markdown/#code" target="_blank" rel="noopener">代码</a></li><li><a href="http://wow.kuapp.com/markdown/#img" target="_blank" rel="noopener">图片</a></li></ul></li><li>其它<ul><li><a href="http://wow.kuapp.com/markdown/#backslash" target="_blank" rel="noopener">反斜杠</a></li><li><a href="http://wow.kuapp.com/markdown/#autolink" target="_blank" rel="noopener">自动链接</a></li></ul></li><li><a href="http://wow.kuapp.com/markdown/#acknowledgement" target="_blank" rel="noopener">感谢</a></li><li><a href="http://wow.kuapp.com/markdown/#editor" target="_blank" rel="noopener">Markdown 免费编辑器</a></li></ul><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>、</code>、<code>、</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 `` 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>这是一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>、</code>、<code>~~</code>~~ 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>或</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="http://wow.kuapp.com/markdown/#html" target="_blank" rel="noopener">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code></code> 标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code></code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code></code> ，但是简单地「每个换行都转换为 <code></code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="http://wow.kuapp.com/markdown/#blockquote" target="_blank" rel="noopener">区块引用</a> 和多段落的 <a href="http://wow.kuapp.com/markdown/#list" target="_blank" rel="noopener">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec("echo $input | $markdown_script");</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 `` 标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You'reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>和</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application "Foo"        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application "Foo"    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>    &lt;div class="footer"&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ "Title") inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  "Optional Title Here"</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  "Optional Title Here"[foo]: http://example.com/  'Optional Title Here'[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用尖括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    "Optional Title Here"</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        "Google"  [2]: http://search.yahoo.com/  "Yahoo Search"  [3]: http://search.msn.com/    "MSN Search"</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        "Google"  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"  [msn]:    http://search.msn.com/    "MSN Search"</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"title="Google"&gt;Google&lt;/a&gt; than from&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or[MSN](http://search.msn.com/ "MSN Search").</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>标签包围，用两个 `*` 或 `_`包起来的话，则会被转成</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>\*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（```），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don't use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg "Optional title")</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  "Optional title attribute"</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。</p><hr><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>[address@example.com](mailto:address@example.com)</code>）会变成一个可以点击的「<a href="mailto:address@example.com">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matery </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客细节修改</title>
      <link href="/bo-ke-xi-jie-xiu-gai.html"/>
      <url>/bo-ke-xi-jie-xiu-gai.html</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在使用matery主题的时候，遇到了一些问题，所以这里作些记录，把这个需要处理的问题归类一下。</p><h2 id="配置修改注意"><a href="#配置修改注意" class="headerlink" title="配置修改注意"></a>配置修改注意</h2><p>1）修改配置时，项目帽号后面要有个空格，不然会报错。例如：enable: true</p><p>2）添加二级目录时，不能只复制配置文件中的内容，这样会报错。粘贴后需要将每一行前在空的地方全部删除，替换为空格，否则一直报错不能成功。</p><h3 id="解决首页标题乱码"><a href="#解决首页标题乱码" class="headerlink" title="解决首页标题乱码"></a>解决首页标题乱码</h3><p>首页正中间的标题与左上角的名字，可以在博客文件夹的_config.yml中修改title和subtitle来进行。</p><p>因为该文件的编码方式默认是ANSI，所以如果想使用中文标题，则需要修改_config.yml的编码方式。</p><p>本人使用Notepad++来修改，先打开文件，然后全选复制，接着修改文件编码方式，这时里面的内容会变为乱码，全部选中粘贴，保存即可。</p><h2 id="评论系统Valine"><a href="#评论系统Valine" class="headerlink" title="评论系统Valine"></a>评论系统Valine</h2><p>1）首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a> 这儿先进行账号注册，并且验证完成，然后创建一个应用。</p><p>2）创建好后打开应用的设置，找到应用key，保存appid和appkey。</p><p>3）在安全中心，将自己的域名，也就是博客访问地址添加到Web安全域名中。</p><p>4）打开主题设置文件_config.myl，搜索valine，将enable的值改为true，把第二步保存的内容填写到appId和appKey中。</p><p>这时便可以。这里说明一下，所有的评论数据将保存在Valine中，如果这个账号关联失效，将丢失所有评论。当然了，如果想删哪个，也可以到这里面进行删除。</p><h2 id="评论系统Gitalk"><a href="#评论系统Gitalk" class="headerlink" title="评论系统Gitalk"></a>评论系统Gitalk</h2><p>这个评论系统是需要登录github账号后才可以，使用的也比较多，先记录下添加步骤。</p><p>1）</p><h2 id="hexo配置文件说明"><a href="#hexo配置文件说明" class="headerlink" title="hexo配置文件说明"></a>hexo配置文件说明</h2><p>这个配置文件默认生成的里面基本都是英文，有一些搞不清楚功能是什么，网上有对应的说明，下面是我总结的。内容不是在刚生成的文件中添加的注释，所以最好是参考着来看，不要直接复制粘贴。</p><pre><code># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Collection            # 网站标题subtitle: wxl103010个人博客    # 网站副标题description: 收藏了不少东西，却没个人能一起分享，很寂寞。    # 网站描述keywords:                    # 网站关键词。使用半角逗号分隔多个关键词author: wxl103010            # 您的名字language: zh-CN                # 网站使用的语言timezone: Asia/Shanghai        # 网站时区# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://wxl103010.github.io            # 网址root: /                                    # 网站根目录permalink: :year/:month/:day/:title/    # 文章的永久链接格式permalink_defaults:                        # 永久链接中各部分的默认值pretty_urls:                            # 改成permalink的值来美化URL  trailing_index: true    # 是否在永久链接中保留尾部的 index.html，设置为 false 时去除  trailing_html: true    # 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)# Directorysource_dir: source            # 资源文件夹，这个文件夹用来存放内容public_dir: public            # 公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags                # 标签文件夹archive_dir: archives        # 归档文件夹category_dir: categories    # 分类文件夹code_dir: downloads/code    # Include code 文件夹，source_dir 下的子目录i18n_dir: :lang                # 国际化（i18n）文件夹skip_render:                # 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。# Writingnew_post_name: :title.md    # 新文章的文件名称default_layout: post        # 预设布局titlecase: false            # 把标题转换为title caseexternal_link:  enable: true                    # 在新标签中打开链接  field: site                    # 对整个网站（site）生效或仅对文章（post）生效  exclude: ''                    # 需要排除的域名。主域名和子域名如 www 需分别配置filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false        # 显示草稿post_asset_folder: false    # 启动 Asset 文件夹relative_link: false        # 把链接改为与根目录的相对位址future: true                # 显示未来的文章highlight:                    # 代码块的设置  enable: false                    # 开启代码块高亮  line_number: true                # 显示行数  auto_detect: false            # 如果未指定语言，则启用自动检测  tab_replace: ''                # 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs  wrap: true                    # Wrap the code block in &lt;table&gt;  hljs: false                    # Use the hljs-* prefix for CSS classes# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: ''  per_page: 10  order_by: -date# Category &amp; Tagdefault_category: uncategorized    # 默认分类category_map:                    # 分类别名tag_map:                        # 标签别名# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD            # 日期格式time_format: HH:mm:ss            # 时间格式## Use post's date for updated date unless set in front-matteruse_date_for_updated: false        # 启用以后，如果 Front Matter 中没有指定 updated， post.updated 将会使用 date 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用# Pagination## Set per_page to 0 to disable paginationper_page: 12                    # 每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page            # 分页目录# Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:                        # Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。exclude:                        # Hexo 会忽略这些文件和目录ignore:                            # Ignore files/folders# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: matery                    # 当前主题名称。值为false时禁用主题</code></pre><h2 id="hexo的优化"><a href="#hexo的优化" class="headerlink" title="hexo的优化"></a>hexo的优化</h2><p>这些也是网上找到的，有些也不太了解，先优化，慢慢熟悉。</p><p>优化信息主要来自：<a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="noopener">https://blog.csdn.net/lzy98/article/details/81140704</a></p><h3 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h3><blockquote><p>Sitemap 可方便网站管理员通知<a href="https://baike.baidu.com/item/搜索引擎/104812" target="_blank" rel="noopener">搜索引擎</a>他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是<a href="https://baike.baidu.com/item/XML" target="_blank" rel="noopener">XML</a> 文件，在其中列出网站中的网址以及关于每个网址的其他元<a href="https://baike.baidu.com/item/数据/33305" target="_blank" rel="noopener">数据</a>（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p></blockquote><p>这是百度百科的信息，感觉还可以，先优化了再说。</p><p>1）生成sitemap文件</p><pre><code>npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜索引擎npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎</code></pre><p>2）修改博客配置文件_config.yml，将以下信息添加进去</p><pre><code># 自动生成sitemapsitemap:   path: sitemap.xml baidusitemap:   path: baidusitemap.xml</code></pre><p>3）修改博客主题配置文件_config.yml，将以下信息添加进去</p><pre><code># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://你的网站</code></pre><p>4）修改sitemap.xml和baidusitemap.xml文件</p><p>将<code>node_modubles\hexo-generator-baidu-sitemap\baidusitemap.ejs</code>和<code>node_modules\hexo-generator-sitemap\sitemap.xml</code>文件中的第二行地址换成自己的地址。</p><p>5）在百度搜索site:<a href="http://www.yangyuanlin.club，出现的界面中选择“提交网站”，然后将自己的网站地址添加上去，点提交。" target="_blank" rel="noopener">www.yangyuanlin.club，出现的界面中选择“提交网站”，然后将自己的网站地址添加上去，点提交。</a></p><p>至此，每次生成后，都会在/public目录中生成sitemap.xml和baidusitemap.xml，这就是你的站点地图。</p><h3 id="优化结构"><a href="#优化结构" class="headerlink" title="优化结构"></a>优化结构</h3><p>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：</p><pre><code>url: http://你的网站root: /permalink: :title.htmlpermalink_defaults:</code></pre><p>好吧，上面是我照抄的，不过确实修改以后，重新生成的链接地址短了几级，不过现在目录地址是文章名字的拼音，中间以-相隔开，所以名字最后短些吧。</p><h3 id="robots-txt文件"><a href="#robots-txt文件" class="headerlink" title="robots.txt文件"></a>robots.txt文件</h3><blockquote><p><strong>robots协议也叫**</strong>robots.txt**（统一小写）是一种存放于<a href="https://baike.baidu.com/item/网站" target="_blank" rel="noopener">网站</a>根目录下的<a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener">ASCII</a>编码的<a href="https://baike.baidu.com/item/文本文件" target="_blank" rel="noopener">文本文件</a>，它通常告诉网络<a href="https://baike.baidu.com/item/搜索引擎" target="_blank" rel="noopener">搜索引擎</a>的漫游器（又称<a href="https://baike.baidu.com/item/网络蜘蛛" target="_blank" rel="noopener">网络蜘蛛</a>），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots<a href="https://baike.baidu.com/item/元数据" target="_blank" rel="noopener">元数据</a>（Metadata，又称元数据）。</p></blockquote><p>不清楚效果怎么样，先加上再说吧。</p><p>1）在source文件夹中新建文件robots.txt</p><p>2）写入如下内容，地址记得修改</p><pre><code># hexo robots.txtUser-agent: *Allow: /Allow: /archives/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://wxl103010.github.io/sitemap.xmlSitemap: https://wxl103010.github.io/baidusitemap.xml</code></pre><h3 id="开启推送"><a href="#开启推送" class="headerlink" title="开启推送"></a>开启推送</h3><p>将网站链接提交到百度，<a href="http://www.sousuoyinqingtijiao.com/baidu/tijiao/" target="_blank" rel="noopener">百度搜索引擎提交入口 </a>,然后验证你的网站，这一点网上有很详细的教程我就不复述了，验证确认你的网站后，继续验证你的网站的robots.txt和sitemap文件是否可用，一般都是可用的。</p><p>然后就可以开始推送了，基本上推送有三种方式：主动推送&gt;自动推送&gt;sitemap三种，一般主动提交比手动提交效果好。</p><p><strong>自动推送</strong></p><p>1）把下面的代码放到\themes\next\source\js\src目录下，文件名为bai.js</p><pre><code>&lt;script&gt;(function(){    var bp = document.createElement('script');    bp.src = '//push.zhanzhang.baidu.com/push.js';    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();&lt;/script&gt;</code></pre><p>2）然后在\scaffolds目录下的post.md文件（模板文件中加入这么一行）</p><pre><code>&lt;script type="text/javascript" src="/js/src/bai.js"&gt;&lt;/script&gt;</code></pre><p>这样只要访问你的这个页面，就会自动向百度推送你的这个网页。</p><p><strong>注意</strong></p><p>以上部分是直接抄的网络信息，所以第一步中的位置自己看着改就好了，第二步代码中的路径，根据第一步的位置来修改。</p><p>管用不管用不清楚，先加上。</p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>1）打开链接<a href="https://ziyuan.baidu.com/site/siteadd。" target="_blank" rel="noopener">https://ziyuan.baidu.com/site/siteadd。</a></p><p>2）按提示书写内容，下一步</p><p>3）验证时采用文件验证。</p><p>也即把下载的验证文件放在source文件夹中，因为一般文章均会被渲染，所以要再把下面的先添加进去。</p><pre><code>---layout: false---</code></pre><p>第四行当然就是原内容了。</p><p>4）上传github后，先进行验证，验证出现的界面中，只有一条验证码，这时点击“完成验证”就好了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matery </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为博客更换主题</title>
      <link href="/wei-bo-ke-geng-huan-zhu-ti.html"/>
      <url>/wei-bo-ke-geng-huan-zhu-ti.html</url>
      
        <content type="html"><![CDATA[<h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>打开刚刚创建的博客可以跟别的对比一下，真心是觉得死难看，难看死了，得马上换个界面。现在网上流行的有很多，不过我个人感觉，够用、适合就好，所以我会写几个我知道试过的，还有我现在使用的这个主题。</p><p><strong>yilia主题地址：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a></strong><br><strong>sakura主题地址：<a href="https://github.com/honjun/hexo-theme-sakura" target="_blank" rel="noopener">https://github.com/honjun/hexo-theme-sakura</a></strong><br><strong>butterfly主题地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev" target="_blank" rel="noopener">https://github.com/jerryc127/hexo-theme-butterfly/tree/dev</a></strong></p><p><strong>matery主题地址：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></strong></p><p>第4个是我现在正在使用的主题，暂时没感觉有什么不合适，先按这个进行书写，如果以后更新的话，会继续记录过程。</p><h3 id="1）下载主题"><a href="#1）下载主题" class="headerlink" title="1）下载主题"></a>1）下载主题</h3><p>键入命令：<code>git clone 主题地址.git themes/主题名称</code></p><p>首先呢，不是要进入文件夹根目录，也就是前文中自己创建的博客文件夹，然后再键入命令。其余主题名称最好还是按原来的名字，不要加中文。其余的主题如果进行下载也可以按这种方式。</p><h3 id="2）修改博客配置"><a href="#2）修改博客配置" class="headerlink" title="2）修改博客配置"></a>2）修改博客配置</h3><p>博客文件下找到_config.yml文件，记事本打开，最下面有个theme，后面的值修改为主题名称即可。这里只要是与你下载时写书的名称一致便可以。</p><h3 id="3）清空缓存、更新博客，最后启动或上传"><a href="#3）清空缓存、更新博客，最后启动或上传" class="headerlink" title="3）清空缓存、更新博客，最后启动或上传"></a>3）清空缓存、更新博客，最后启动或上传</h3><p>这时再打开博客，便可以看到新的主题大致情况，不过大部分功能依旧不能使用，所以需要继续调整。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>我把主题配置的内容全部抄到下面了，根据需要照着做就行，这些只是大体上的修改，操作完后大致上才能有个博客的样子，不致于除了主页基本打不开。</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery</p><p><strong>_config.yml 文件的其它修改建议:</strong></p><ul><li>请修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io）。" target="_blank" rel="noopener">http://xxx.github.io）。</a></li><li>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 language 的值为 zh-CN。</li></ul><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p>categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories/index.md 文件，那么你就需要新建一个，命令如下：</p><p><code>hexo new page "categories"</code><br>编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p>tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags/index.md 文件，那么你就需要新建一个，命令如下：</p><p><code>hexo new page "tags"</code><br>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下：</p><p><code>hexo new page "about"</code><br>编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h4 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h4><p>contact 页是用来展示留言板信息的页面，如果在你的博客 source 目录下还没有 contact/index.md 文件，那么你就需要新建一个，命令如下：</p><p><code>hexo new page "contact"</code><br>编辑你刚刚新建的页面文件 /source/contact/index.md，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><p>注：本留言板功能依赖于第三方评论系统，请激活你的评论系统才有效果。并且在主题的 _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释即可。</p><h4 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h4><p>friends 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下：</p><p><code>hexo new page "friends"</code><br>编辑你刚刚新建的页面文件 /source/friends/index.md，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre><code>[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：Index或主页) 2.图标icon 可以在Font Awesome 中查找</p><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)<br>2.在children下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 -.<br>4.注意缩进格式</p><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。</p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：</p><p><code>npm i -S hexo-prism-plugin</code><br>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre><code>highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><p><code>npm install hexo-generator-search --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h4 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><p><code>npm i hexo-permalink-pinyin --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><p>注：除了此插件外，hexo-abbrlink 插件也可以生成非中文的链接。</p><h4 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。</p><p>安装命令如下：</p><p><code>npm i --save hexo-wordcount</code><br>然后只需在本主题下的 _config.yml 文件中，将各个文章字数相关的配置激活即可：</p><pre><code>postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.</code></pre><h4 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h4><p>本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下：</p><p><code>npm install hexo-filter-github-emojis --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h4 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：</p><p><code>npm install hexo-generator-feed --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。</p><h4 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 DaoVoice 在线聊天功能（可选的）</h4><p>前往 DaoVoice 官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中。</p><h4 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 Tidio 在线聊天功能（可选的）</h4><p>前往 Tidio 官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。</p><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h4 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h4><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;% if (theme.socialLink.github) { %&gt;    &lt;a href="&lt;%= theme.socialLink.github %&gt;" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-github"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><p>其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: fab fa-facebook</li><li>Twitter: fab fa-twitter</li><li>Google-plus: fab fa-google-plus</li><li>Linkedin: fab fa-linkedin</li><li>Tumblr: fab fa-tumblr</li><li>Medium: fab fa-medium</li><li>Slack: fab fa-slack</li><li>Sina Weibo: fab fa-weibo</li><li>Wechat: fab fa-weixin</li><li>QQ: fab fa-qq</li><li>Zhihu: fab fa-zhihu</li></ul><p>注意: 本主题中使用的 Font Awesome 版本为 5.11.0。</p><h4 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h4><p>在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h4><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 source 目录下的 _data 目录（没有的话就新建一个）中新建 musics.json 文件，文件内容如下所示：</p><pre><code>[{    "name": "五月雨变奏电音",    "artist": "AnimeVibe",    "url": "http://xxx.com/music1.mp3",    "cover": "http://xxx.com/music-cover1.png"}, {    "name": "Take me hand",    "artist": "DAISHI DANCE,Cecile Corbel",    "url": "/medias/music/music2.mp3",    "cover": "/medias/music/cover2.png"}, {    "name": "Shape of You",    "artist": "J.Fla",    "url": "http://xxx.com/music3.mp3",    "cover": "http://xxx.com/music-cover3.png"}]</code></pre><p>注：以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p><p>然后，在主题的 _config.yml 配置文件中激活配置即可：</p><pre><code># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: '#42b983'  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</code></pre><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h4 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h4><p>Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><pre><code>注意:如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</code></pre><p>以下为文章的 Front-matter 示例。</p><p><strong>最简示例</strong></p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p><strong>最全示例</strong></p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><p>在本主题的 _config.yml 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><p>我认为个人博客应该都有自己的风格和特色。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 <script></script> 代码中：</p><pre><code>$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matery </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/da-jian-ge-ren-bo-ke.html"/>
      <url>/da-jian-ge-ren-bo-ke.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、环境部署"><a href="#1、环境部署" class="headerlink" title="1、环境部署"></a>1、环境部署</h2><p>在电脑中想得到一些结果，必须有程序来帮忙进行处理，所以这边需要提前准备安装的程序有两个软件git和Node.js，来帮助进行处理相关事宜。</p><p>git下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>Node.js下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>这个操作其实就很简单了，打开下载地址，然后选择Windows版本，下载后打开使用默认安装即可。</p><p>关于64或32位的问题，需要看操作系统是哪个，不过现在一般都是64位的系统了。</p><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>这个的话就稍麻烦一些，其实是不复杂的。主要是使用好相关命令就行，再一个就是所下载的地址不要弄错了。</p><p>1）键入命令<code>yum -y install git</code>，等待完成后，再输入命令<code>git -v</code>，这时没有报错，而出现版本号，便是git安装成功。</p><p>2）键入命令<code>wget 下载地址</code>，其中的下载地址，可以从官网中找到，右击复制链接即可，成功后可通过命令<code>ls</code>查看到所下载的文件。</p><p>3）接着输入两条命令<code>xz -d 文件名</code>和<code>tar -xvf 文件名</code>，这时便可以看到已经解压后的文件夹。</p><p>4）创建node快捷方式，键入命令<code>ln -s /root/文件夹名/bin/node /usr/local/bin/node</code>。</p><p>5）创建    npm快捷方式，键入命令<code>ln -s /root/文件夹名/bin/npm /usr/local/bin/npm</code>。</p><p>6）通过使用参加<code>-v</code>来检查是否能查询到node和npm的版本号，可以即安装完成。</p><h2 id="2、安装框架"><a href="#2、安装框架" class="headerlink" title="2、安装框架"></a>2、安装框架</h2><p>这里我根据网上的教程，使用的是hexo，现在操作这些都已经非常的简单了，键入命令<code>npm install -g hexo-cli</code>，等待下载完成即可。</p><p>Windows版本下载完成即可使用，如果是Linux则需要再次创建快捷方式，键入命令<code>ln -s /root/文件夹名/bin/hexo /usr/local/bin/hexo</code>。</p><p>最后仍然是通过<code>-v</code>来检查是否能查看版本号。</p><h2 id="3、生成博客"><a href="#3、生成博客" class="headerlink" title="3、生成博客"></a>3、生成博客</h2><p>1）新建文件夹</p><p>Windows中找一个地方创建一个文件夹，例如在D盘中创建blog文件夹，用于存放博客的所有文件。该文件中保存着与博客相关的所有文件，如果博客在创建过程中出现问题，可以直接删除文件然后重新创建，没有任何影响。</p><p>Linux中创建的话使用命令<code>mkdir</code>来进行创建，独立度与Windows中一样。</p><p>2）进入文件夹</p><p>这个时候最好是使用命令行来进行进入，Linux中很简单，直接<code>cd blog</code>即可，Windows中需要运行<code>cmd</code>，然后出现的黑色界面中，输入<code>d:</code>，先切换到D盘，然后输入<code>cd blog</code>。</p><p>3）初始化博客</p><p>键入命令<code>hexo init</code>。</p><p>4）启动博客</p><p>键入命令<code>hexo s</code>，其中的s是缩写，也可以写全<code>hexo server</code>。这时随便打开一个浏览器，输入地址<code>http://localhost:4000/</code>，便可以看到刚刚建好的博客。</p><p>将刚才输入命令的黑色窗口关闭后，博客也会随之关闭。继续查看步骤照上。</p><p>有时候打开后发现有些改变没有生效，那就是启动前要更新一下，使用命令<code>hexo clean</code>和<code>hexo g</code>，接着启动便可以了。</p><h2 id="4、部署到github中"><a href="#4、部署到github中" class="headerlink" title="4、部署到github中"></a>4、部署到github中</h2><p>因为现在为止博客只是在我们的电脑中，要想让其他人也能看到，那就需要添加到公共区域中，常规的方法是将自己的电脑一直开启博客，然后使用域名，电脑可以换成云服务器，但这样成本就增加了，所以根据当前我查到的信息，可以先将博客传到github中，这样只需要做好上传就行了，其余的基本就可以暂时不用考虑。</p><p>1）github官网：<a href="https://github.com/login" target="_blank" rel="noopener">https://github.com/login</a></p><p>2）先在github官网中进行账号注册。</p><p>3）注册好后进入主页，然后在右上方的菜单中选择”New repository“，意思是创建仓库。</p><p>4）接下来出现的界面，主要是将仓库地址确定一下，格式要按照”自定义.github.io“来书写，具体原因我还没查，至少我试过一个结果是不能访问的。</p><p>5）打开电脑中的命令界面，输入<code>npm install --save hexo-deployer-git</code>，这个是安装git部署插件。</p><p>6）在博客的文件夹中，也就是前面自己创建的文件夹中，找到_config.yml文件，然后用记事本打开，找到“Deployment”，将下面的内容改为“type: git”、“repo: git仓库地址”，然后再添加一行“branch: master”。</p><p>其中git仓库地址，不是前面添加仓库时写的地址，而是添加好后，进入仓库界面看到的一个地址，地址后面以git结尾。</p><p>7）这时便可以上传了，依旧照上面的方式，在命令行进入自己创建的文件夹，然后键入命令<code>hexo d</code>，这时系统便会自动将做好的博客上传到github的仓库中。</p><p>第一次上传时，会要求填写github的登录账号和密码，这是正常情况。</p><p>8）上传完毕后，使用自己书写的仓库地址，便能访问刚刚上传的博客了。例如：<a href="http://wxl103010.github.io">http://wxl103010.github.io</a></p><h2 id="5、多余操作"><a href="#5、多余操作" class="headerlink" title="5、多余操作"></a>5、多余操作</h2><p>本人是个非常懒的人，所以以上的步骤中经常得更新、上传、启动，非常的麻烦，我在网上找了找办法，做几个批处理，便可以暂时解决这些问题了。</p><p>使用的办法是做批处理文件，提前写好命令后，到时候直接点击，便会自动操作，再也不需要一点一点来了。下面就是我写的脚本内容。相关的地址可以根据实际的情况来修改，命令也可以按需要进行调整。</p><p>1）更新并本地启动博客</p><pre><code>@echo offd:cd d:\blogecho "清空缓存" &amp;&amp; hexo clean &amp;&amp; echo "更新博客" &amp;&amp; hexo g &amp;&amp; echo 登录地址：http://localhost:4000 &amp;&amp; echo 关闭本窗口即可关闭本地微博 &amp;&amp; hexo s</code></pre><p>2）更新并上传至github</p><pre><code>@echo offdcd d:\bloecho "清空缓存" &amp;&amp; hexo clean &amp;&amp; echo "更新博客" &amp;&amp; hexo g &amp;&amp; echo "上传至github中" &amp;&amp; hexo d</code></pre><p>3）直接进入博客根目录命令行</p><pre><code>@echo offd:cd d:\blogcmd /k echo.</code></pre><p>4）感觉还是麻烦，整理了半天，现在有个总结式的菜单，一个文件搞定以上三个。</p><p>首先是建一个Blog_batch的批处理文件，放入以下代码：</p><pre><code>@ECHO OFF&amp;PUSHD %~DP0 &amp;TITLE 博客自动处理脚本选择color 0aGOTO MENU:MENUclsecho.echo.  ===========博客自动处理脚本选择===========echo.echo.1、更新并本地启动echo.2、更新并上传githubecho.3、打开博客根目录echo.4、退出echo.echo.echo.请选择项目的序号：set /p ID=if "%ID%"=="1" goto cmd1if "%ID%"=="2" goto cmd2if "%ID%"=="3" goto cmd3if "%id%"=="4" exitEcho.&amp;Echo 输入无效，请重新输入！pause &gt;nulGoto MENU:cmd1clsd:cd d:\blogecho "清空缓存" &amp;&amp; hexo clean &amp;&amp; echo "更新博客" &amp;&amp; hexo g &amp;&amp; cls &amp;&amp; echo. &amp;&amp; echo 登录地址：http://localhost:4000 &amp;&amp; echo 按下“Ctrl + c”后输入 n 可退回菜单 &amp;&amp; echo.&amp;&amp; hexo s &amp;&amp; cmd /k Blog_batch:cmd2clsd:cd d:\blogecho "清空缓存" &amp;&amp; hexo clean &amp;&amp; echo "更新博客" &amp;&amp; hexo g &amp;&amp; echo "上传至github中" &amp;&amp; hexo d &amp;&amp; cmd /k Blog_batch:cmd3clsd:cd d:\blogecho.echo.输入命令Blog_batch后便可重返菜单cmd /k echo.:cmd4echo 1234GOTO MENU</code></pre><p>其中的地址根据实际博客文件夹位置修改，该文件的名字也可以自定义，但修改后，内容中的小写menu也要随之进行修改，否则不会跳回菜单。</p><p>另外一个问题，本地启动后，关闭只能是Ctrl + c ，但这样操作会引起关闭批处理，只能是多加一步选 n ，暂时还没有彻底解决办法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
